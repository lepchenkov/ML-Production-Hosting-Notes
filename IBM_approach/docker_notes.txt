Docker is a development platform and a virtualization technology.
Apps run the same way no matter where they are.

Containers usually run one specific task each, such as a mySQL database, or
a node.js application. They may be stored together and potentially scale. 

Docker is a form of virtualization but the resources are shared directly
with the host. 

VM allocates the resources and builds a fake hardware and communicates with 
a host operating system via a Hypervisor. But Docker communicates natively 
with the system kernel bypassing the middle man on linux machines and 
windows 10. This means that we cun run any version of linux in the 
container and it will run natively. Docker uses less space too. It reuses 
files efficiently by using layered filesystem. 

Dockerfile can be built into a docker image that can be run as a docker 
container. Dockerfile instructs how a docker image will be built, like 
a blueprint. 
We first select a base image to start from using a FROM keyword. 
    FROM ubuntu: 16.04
from there we can run commands such as download, install and run your 
software. 
    RUN echo "Thanks for watching!"

Once the dockerfile is complete we can build it using docker build followed 
by the t-flag so we can name our image and pass the location of the docker 
file.
    docker build -t myDockerImage.
Once comlete we can verify the existence of our images by running 
    docker images

We can use a pre-made docker image from the docker hub using   
    docker pull ubuntu:16.04

If you don't specify the tag it will fetch the latest version.

To run a container - pull it down from the docker hub or build the image 
and then run followed by the image name.
    docker run myDockerImage
And there are many options available for running the containers such as 
running it in the detached mode.
    docker run -d -p 80:80 image service myapp

We can view our running docker container with 
    docker container ls

Running a single container is fun but it is annoying to enter all this 
commands to get a container running and we may want to control several 
containers that constitute an application. And this is going to be 
accomplished with docker compose. 

________________________________________________________________________
Docker Compsose
Modern applications are mostly build using separate containers or 
microservices. 
Docker-compose.yml file instructs how to run a docker compose setup. 
We start with a version number
    version: '3'
And then we define our services. Services specify what docker containers 
we want to run. A simple wordpress website can be made using only two 
services. 
    services:
        wordpress:
            image: wordpress:latest
            depends_on:
                -db
            restart: always
            volumes:
                -wp_data:/var/www/html
            ports:
                -"80:80"
            environment:
                WORDPRESS_DB_USER: wp_user
                WORDPRESS_DB_PASSWORD: wp_db_password
                WORDPRESS_DB_HOST: db:3306
            
        db:
            image: maria:latest
            restart: always
            volumes:
             - db_data:/var/lib/mysql
            environment:
                MYSQL_ROOT_PASSWORD: root_pass
                MYSQL_DATABASE: wordpress
                MYSQL_USER: wp_user
                MYSQL_PASSWORD: wp_db_password
volumes:
    wp_data:
    db_data:


We also should create docker volume for persistent data. Volumes is a 
filesystem you create outside a container that is then mounted on the inside
of this container once they are spun up. 
wp_data will hold all the wordpress information and db_data will hold 
database information. After the volume name we specify where we going to 
mount this filesystem in the contatiner, separted by colon.  

We also want to expose a port from the container and map it to the port 
on the host machine. We only need a single port exposed "80:80" for http.

Environment variables allow to pass information into containers. For the 
wordpress there are three variables at minimum. This is the information that
wordpress needs to access the database. 
We create a new service maria db which is a mysql replacement. And we want 
to keep all our database information after the container is shut down, so
we use db_volume. 

The db host is lookig for the ip adress and port of the mysql server. But 
docer compose allows to user service name in place of an iP so db is all we
need for the ip adress.

Specifying restart:always makes containers attempt restarting after the 
shutdowns.  

depends_on key makes sure 

Will start our docker compose script with 
    docker-compose up -d 
Will run this script in the directory where our .yml file lives. Up instructs
docker compose to spin up those containers and tag d is to run this compose as
a daemon or in the background.

Then we can check our website on the locahost.  